{
    "openapi": "3.0.0",
    "info": {
        "title": "Snapp API",
        "version": "1.0"
    },
    "paths": {
        "/api": {},
        "/api/v1/admin/employee": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Get a list of employees",
                "description": "Returns a paginated list of employees with their roles",
                "operationId": "885bbdb1eeb01da9dd0e3b794251ddba",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of stores to return per page (default 10).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to return (default 1).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "description": "The current page number",
                                            "type": "integer"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "first_page_url": {
                                            "description": "The URL for the first page of results",
                                            "type": "string"
                                        },
                                        "from": {
                                            "description": "The index of the first item in the current page of results",
                                            "type": "integer"
                                        },
                                        "last_page": {
                                            "description": "The total number of pages of results",
                                            "type": "integer"
                                        },
                                        "last_page_url": {
                                            "description": "The URL for the last page of results",
                                            "type": "string"
                                        },
                                        "next_page_url": {
                                            "description": "The URL for the next page of results",
                                            "type": "string"
                                        },
                                        "path": {
                                            "description": "The URL path for the current page of results",
                                            "type": "string"
                                        },
                                        "per_page": {
                                            "description": "The number of results per page",
                                            "type": "integer"
                                        },
                                        "prev_page_url": {
                                            "description": "The URL for the previous page of results",
                                            "type": "string"
                                        },
                                        "to": {
                                            "description": "The index of the last item in the current page of results",
                                            "type": "integer"
                                        },
                                        "total": {
                                            "description": "The total number of items in the result set",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Admin"
                ],
                "summary": "Create a new employee",
                "description": "Creates a new employee with the given information",
                "operationId": "createEmployee",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateEmployeeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Success"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/employee/{employeeId}": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Get employee by ID",
                "description": "Returns a single employee by ID",
                "operationId": "getEmployeeById",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "path",
                        "description": "ID of employee to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Employee not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Admin"
                ],
                "summary": "Update employee by ID",
                "description": "Updates a single employee by ID",
                "operationId": "updateEmployeeById",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "path",
                        "description": "ID of employee to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Employee object that needs to be updated",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateEmployeesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Employee not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Admin"
                ],
                "summary": "Delete employee by ID",
                "description": "Deletes a single employee by ID",
                "operationId": "deleteEmployeeById",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "path",
                        "description": "ID of employee to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Employee not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/store": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Get all stores",
                "description": "Retrieve a paginated list of all stores.",
                "operationId": "3b53855546b859f5582ec8889ce82108",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of stores to return per page (default 10).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to return (default 1).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Success"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Admin"
                ],
                "summary": "Create a new store",
                "description": "Creates a new store with the given information",
                "operationId": "createUserStore",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "maxLength": 70
                                    },
                                    "family": {
                                        "type": "string",
                                        "maxLength": 70
                                    },
                                    "mobile": {
                                        "type": "string",
                                        "format": "mobile",
                                        "example": "09123456789"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "newPassword"
                                    },
                                    "status": {
                                        "description": "User's status :: 1 => active, 0 => inactive, -1 => suspended, -2 => blocked",
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "nationalCode": {
                                        "type": "string",
                                        "format": "nationalCode",
                                        "example": "0123456789"
                                    },
                                    "nationalPhoto": {
                                        "description": "The user's national photo image file (JPEG or PNG format, max size 15MB, min dimensions 100x100, max dimensions 1000x1000).",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "address": {
                                        "type": "string",
                                        "maxLength": 255
                                    },
                                    "postCode": {
                                        "type": "string",
                                        "format": "postCode",
                                        "example": "1234567890"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "format": "phone",
                                        "example": "1234567890"
                                    },
                                    "storeCategory_id": {
                                        "description": "Category ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "neighborhood_id": {
                                        "description": "Neighborhood ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "storeAreaType": {
                                        "description": "Area Type",
                                        "type": "string",
                                        "enum": [
                                            "RENT",
                                            "OWNERSHIP"
                                        ],
                                        "example": "RENT"
                                    },
                                    "storeName": {
                                        "description": "Name",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "storeAddress": {
                                        "description": "Address",
                                        "type": "string",
                                        "example": "123 Main St"
                                    },
                                    "storePostCode": {
                                        "description": "Post Code",
                                        "type": "integer",
                                        "example": "1234567890"
                                    },
                                    "storePhone": {
                                        "description": "Phone",
                                        "type": "integer",
                                        "example": "1234567890"
                                    },
                                    "storeLat": {
                                        "description": "Latitude",
                                        "type": "number",
                                        "format": "desimal",
                                        "example": "40.7128"
                                    },
                                    "storeLang": {
                                        "description": "Longitude",
                                        "type": "number",
                                        "format": "desimal",
                                        "example": "-74.0060"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Success"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/store/{storeId}": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Get store",
                "description": "Get the profile information of a specific store.",
                "operationId": "e609989295b856b1076405e8c0bf9eba",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "The ID of the store to get.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Success"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Admin"
                ],
                "summary": "Delete store by ID",
                "description": "Deletes a single store by ID",
                "operationId": "deleteStoreById",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "ID of store to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Store not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/store/{storeId}/update": {
            "post": {
                "tags": [
                    "Admin"
                ],
                "summary": "Update store",
                "description": "Update the profile and store information of a specific store.",
                "operationId": "c58978c8b331888334085567c5fa02e9",
                "parameters": [
                    {
                        "name": "storeId",
                        "in": "path",
                        "description": "The ID of the store to update.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "maxLength": 70
                                    },
                                    "family": {
                                        "type": "string",
                                        "maxLength": 70
                                    },
                                    "mobile": {
                                        "type": "string",
                                        "format": "mobile",
                                        "example": "09123456789"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "newPassword"
                                    },
                                    "status": {
                                        "description": "User's status :: 1 => active, 0 => inactive, -1 => suspended, -2 => blocked",
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "nationalCode": {
                                        "type": "string",
                                        "format": "nationalCode",
                                        "example": "0123456789"
                                    },
                                    "nationalPhoto": {
                                        "description": "The user's national photo image file (JPEG or PNG format, max size 15MB, min dimensions 100x100, max dimensions 1000x1000).",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "address": {
                                        "type": "string",
                                        "maxLength": 255
                                    },
                                    "postCode": {
                                        "type": "string",
                                        "format": "postCode",
                                        "example": "1234567890"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "format": "phone",
                                        "example": "1234567890"
                                    },
                                    "storeCategory_id": {
                                        "description": "Category ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "storeAreaType": {
                                        "description": "Area Type",
                                        "type": "string",
                                        "enum": [
                                            "RENT",
                                            "OWNERSHIP"
                                        ],
                                        "example": "RENT"
                                    },
                                    "storeName": {
                                        "description": "Name",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "storeAddress": {
                                        "description": "Address",
                                        "type": "string",
                                        "example": "123 Main St"
                                    },
                                    "storePostCode": {
                                        "description": "Post Code",
                                        "type": "integer",
                                        "example": "1234567890"
                                    },
                                    "storePhone": {
                                        "description": "Phone",
                                        "type": "integer",
                                        "example": "1234567890"
                                    },
                                    "storeLat": {
                                        "description": "Latitude",
                                        "type": "number",
                                        "format": "desimal",
                                        "example": "40.7128"
                                    },
                                    "storeLang": {
                                        "description": "Longitude",
                                        "type": "number",
                                        "format": "desimal",
                                        "example": "-74.0060"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Success"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/vehicle": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Get all Vehicles",
                "description": "Retrieve a paginated list of all Vehicles.",
                "operationId": "1fde9b4da6d1f7110a1b2882e408b5e7",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of Vehicles to return per page (default 10).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to return (default 1).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Success"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Admin"
                ],
                "summary": "Create a new vehicle",
                "description": "Creates a new vehicle with the given information",
                "operationId": "createUserVehicle",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "maxLength": 70
                                    },
                                    "family": {
                                        "type": "string",
                                        "maxLength": 70
                                    },
                                    "mobile": {
                                        "type": "string",
                                        "format": "mobile",
                                        "example": "09123456789"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "newPassword"
                                    },
                                    "status": {
                                        "description": "User's status :: 1 => active, 0 => inactive, -1 => suspended, -2 => blocked",
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "nationalCode": {
                                        "type": "string",
                                        "format": "nationalCode",
                                        "example": "0123456789"
                                    },
                                    "nationalPhoto": {
                                        "description": "The user's national photo image file (JPEG or PNG format, max size 15MB, min dimensions 100x100, max dimensions 1000x1000).",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "address": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "address"
                                    },
                                    "postCode": {
                                        "type": "string",
                                        "format": "postCode",
                                        "example": "1234567890"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "format": "phone",
                                        "example": "1234567890"
                                    },
                                    "neighborhoodAvailable": {
                                        "description": "Required. Array of neighborhood IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "format": "int64"
                                        }
                                    },
                                    "storeAvailable": {
                                        "description": "The available stores for the vehicle.",
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "expire": {
                                                    "type": "string",
                                                    "format": "date"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "storeBlocked": {
                                        "description": "The blocked stores for the vehicle.",
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "expire": {
                                                    "type": "string",
                                                    "format": "date"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": {
                                        "description": "The type of the vehicle (MOTOR or CAR)",
                                        "type": "string",
                                        "enum": [
                                            "MOTOR",
                                            "CAR"
                                        ],
                                        "example": "MOTOR"
                                    },
                                    "brand": {
                                        "description": "The brand of the vehicle",
                                        "type": "string",
                                        "maxLength": 150,
                                        "example": "brand"
                                    },
                                    "pelak": {
                                        "description": "The pelak of the vehicle",
                                        "type": "string",
                                        "maxLength": 50,
                                        "example": "pelak"
                                    },
                                    "color": {
                                        "description": "The color of the vehicle",
                                        "type": "string",
                                        "maxLength": 50,
                                        "example": "color"
                                    },
                                    "model": {
                                        "description": "The model of the vehicle",
                                        "type": "string",
                                        "maxLength": 150,
                                        "example": "model"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Success"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/vehicle/{vehicleId}": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Get vehicle",
                "description": "Get the profile information of a specific vehicle.",
                "operationId": "2103968b4db0780175db5d1cbe638752",
                "parameters": [
                    {
                        "name": "vehicleId",
                        "in": "path",
                        "description": "The ID of the vehicle to get.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Success"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Admin"
                ],
                "summary": "Delete vehicle by ID",
                "description": "Deletes a single vehicle by ID",
                "operationId": "deleteVehicleById",
                "parameters": [
                    {
                        "name": "vehicleId",
                        "in": "path",
                        "description": "ID of vehicle to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "vehicle not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/vehicle/{vehicleId}/update": {
            "post": {
                "tags": [
                    "Admin"
                ],
                "summary": "Update vehicle",
                "description": "Update the profile and vehicle information of a specific vehicle.",
                "operationId": "f7ee406ab0f0e0faa62485f434bd28f2",
                "parameters": [
                    {
                        "name": "vehicleId",
                        "in": "path",
                        "description": "The ID of the vehicle to update.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "maxLength": 70
                                    },
                                    "family": {
                                        "type": "string",
                                        "maxLength": 70
                                    },
                                    "mobile": {
                                        "type": "string",
                                        "format": "mobile",
                                        "example": "09123456789"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "newPassword"
                                    },
                                    "status": {
                                        "description": "User's status :: 1 => active, 0 => inactive, -1 => suspended, -2 => blocked",
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "nationalCode": {
                                        "type": "string",
                                        "format": "nationalCode",
                                        "example": "0123456789"
                                    },
                                    "nationalPhoto": {
                                        "description": "The user's national photo image file (JPEG or PNG format, max size 15MB, min dimensions 100x100, max dimensions 1000x1000).",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "address": {
                                        "type": "string",
                                        "maxLength": 255,
                                        "example": "1234567890"
                                    },
                                    "postCode": {
                                        "type": "string",
                                        "format": "postCode",
                                        "example": "1234567890"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "format": "phone",
                                        "example": "1234567890"
                                    },
                                    "neighborhoodAvailable": {
                                        "description": "Required. Array of neighborhood IDs",
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "format": "int64"
                                        }
                                    },
                                    "storeAvailable": {
                                        "description": "The available stores for the vehicle.",
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer"
                                                },
                                                "expire": {
                                                    "type": "string",
                                                    "format": "date"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": {
                                        "description": "The type of the vehicle (MOTOR or CAR)",
                                        "type": "string",
                                        "enum": [
                                            "MOTOR",
                                            "CAR"
                                        ],
                                        "example": "CAR"
                                    },
                                    "brand": {
                                        "description": "The brand of the vehicle",
                                        "type": "string",
                                        "maxLength": 150,
                                        "example": "brand1"
                                    },
                                    "pelak": {
                                        "description": "The pelak of the vehicle",
                                        "type": "string",
                                        "maxLength": 50,
                                        "example": "pelak1"
                                    },
                                    "color": {
                                        "description": "The color of the vehicle",
                                        "type": "string",
                                        "maxLength": 50,
                                        "example": "color1"
                                    },
                                    "model": {
                                        "description": "The model of the vehicle",
                                        "type": "string",
                                        "maxLength": 150,
                                        "example": "model1"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Success"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 200
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/roles": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Get all roles",
                "description": "Returns all roles",
                "operationId": "getRoles",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "example": "admin"
                                            },
                                            "description": {
                                                "type": "string",
                                                "example": "Administrator role"
                                            },
                                            "display_name": {
                                                "type": "string",
                                                "example": "Admin"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/permissions": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Get all permissions",
                "description": "Returns all permissions",
                "operationId": "getPermissions",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/role": {
            "post": {
                "tags": [
                    "Admin"
                ],
                "summary": "Add new role",
                "description": "Add new role",
                "operationId": "9cfe8c6c307205265f5e596089b2ff62",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/store/block": {
            "get": {
                "tags": [
                    "Store"
                ],
                "summary": "Get a list of vehicle blocked with user",
                "operationId": "217d50dc98a3789aa220b7c07fd492a7",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of results per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Store"
                ],
                "summary": "Blocked the vehicle",
                "description": "Add the vehicle to blocked list",
                "operationId": "bf7ac8c72c208d03084c810798297b61",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "integer"
                                    },
                                    "expire": {
                                        "type": "string",
                                        "format": "date"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/store/block/{id}": {
            "delete": {
                "tags": [
                    "Store"
                ],
                "summary": "Delete blocked vehicle by ID",
                "description": "Deletes a blocked vehicle by ID",
                "operationId": "blockedId",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of blocked record",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Employee not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/block": {
            "get": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Get a list of store blocked with user",
                "operationId": "9733b52bf87a163288c4a012fe6cd1ee",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of results per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Blocked the store",
                "description": "Add the store to blocked list",
                "operationId": "07f4e436414ec48f993730e8cd73ee2d",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "integer"
                                    },
                                    "expire": {
                                        "type": "string",
                                        "format": "date"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/block/{id}": {
            "delete": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Delete blocked vehicle by ID",
                "description": "Deletes a blocked vehicle by ID",
                "operationId": "blockedStoreId",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of blocked record",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Employee not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/coin-setting": {
            "get": {
                "tags": [
                    "Coin Setting"
                ],
                "summary": "Get the coin setting",
                "description": "Returns the current coin setting",
                "operationId": "22c02a3889b2569c81c6107d8d20b6f6",
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/coin-setting": {
            "put": {
                "tags": [
                    "Coin Setting"
                ],
                "summary": "Save the coin setting",
                "description": "Updates or creates the coin setting",
                "operationId": "1018940d7fd571f213e1a2924bf09ba0",
                "requestBody": {
                    "description": "The new coin setting",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateCoinSettingRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "example": {
                                    "message": "The coin setting has been saved successfully"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/user/coin-wallet/reasons": {
            "get": {
                "tags": [
                    "Coin Wallet"
                ],
                "summary": "Get all coin wallet transaction reasons",
                "description": "Returns a list of all wallet transaction reasons",
                "operationId": "bd0dd3c6bac40b34f3a62c18958ea923",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/user/coin-wallet": {
            "get": {
                "tags": [
                    "Coin Wallet"
                ],
                "summary": "Get user's coin wallet",
                "description": "Returns the current user's coin wallet",
                "operationId": "getCoinWallet",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/user/coin-wallet/transaction": {
            "post": {
                "tags": [
                    "Coin Wallet"
                ],
                "summary": "Store a new coin wallet transaction",
                "description": "Store a new coin wallet transaction",
                "operationId": "2c45615260277c3942d37d0f1e16f60a",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreCoinWalletTransactionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/user/coin-wallet/travel-transaction": {
            "post": {
                "tags": [
                    "Coin Wallet"
                ],
                "summary": "Store Travel Transaction",
                "description": "Store Travel Transaction and update user's coin wallet balance",
                "operationId": "0aa152980c25abc89b50386b7be7064c",
                "requestBody": {
                    "description": "Store Travel Transaction Request body data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "travel_id"
                                ],
                                "properties": {
                                    "travel_id": {
                                        "description": "ID of the travel",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/user/coin-wallet/buy-coin/online": {
            "post": {
                "tags": [
                    "Coin Wallet"
                ],
                "summary": "Buy Coin Online",
                "description": "Buy coins online using available payment gateways",
                "operationId": "f3ea3bac2d577f1c022aed4a9339cdd3",
                "requestBody": {
                    "description": "Buy Coin Request body data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "gateway",
                                    "coins"
                                ],
                                "properties": {
                                    "gateway": {
                                        "description": "Payment gateway name",
                                        "type": "string",
                                        "enum": [
                                            "zarinpal",
                                            "mellat"
                                        ]
                                    },
                                    "coins": {
                                        "description": "Number of coins to buy",
                                        "type": "integer",
                                        "example": 10
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/neighborhood/fare/calculator": {
            "get": {
                "tags": [
                    "Neighborhood"
                ],
                "summary": "Get inter-neighborhood fare",
                "description": "Get the fare for traveling between two neighborhoods",
                "operationId": "0e43fa7d0b0c739bac6068a9ef87e809",
                "parameters": [
                    {
                        "name": "origin",
                        "in": "query",
                        "description": "The origin neighborhood id",
                        "required": true,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "destination",
                        "in": "query",
                        "description": "The destination neighborhood id",
                        "required": true,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inter neighborhood fare calculated successfully"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/neighborhood/fare": {
            "post": {
                "tags": [
                    "Neighborhood"
                ],
                "summary": "Calculate inter neighborhood fare",
                "operationId": "82ca6ffc6da48f4f1d26883ac35af1fe",
                "requestBody": {
                    "description": "Request body for calculating inter neighborhood fare",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreNeighborhoodFareRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Inter neighborhood fare calculated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Inter Neighborhood Fare Created Successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/neighborhood/fare/edit/{interNeighborhoodFare}": {
            "put": {
                "tags": [
                    "Neighborhood"
                ],
                "summary": "Edit an inter-neighborhood fare",
                "description": "Edit an existing inter-neighborhood fare record.",
                "operationId": "editInterNeighborhoodFare",
                "parameters": [
                    {
                        "name": "interNeighborhoodFare",
                        "in": "path",
                        "description": "ID of the inter-neighborhood fare to edit",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body for updating an inter-neighborhood fare",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "origin",
                                    "destination",
                                    "fare"
                                ],
                                "properties": {
                                    "origin": {
                                        "description": "The ID of the origin neighborhood",
                                        "type": "integer"
                                    },
                                    "destination": {
                                        "description": "The ID of the destination neighborhood",
                                        "type": "integer"
                                    },
                                    "fare": {
                                        "description": "The new fare for the inter-neighborhood",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Inter-neighborhood fare updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Inter-neighborhood fare updated successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Inter-neighborhood fare not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/neighborhood": {
            "get": {
                "tags": [
                    "Neighborhood"
                ],
                "summary": "Get a list of neighborhoods",
                "operationId": "95eaeb460707e09b8fecaab7c3524ea3",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of stores to return per page (default 10).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to return (default 1).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "origin_neighborhood_id",
                        "in": "query",
                        "description": "Calculate fee from origin neighborhood (default 1).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/neighborhood/fee/histories": {
            "get": {
                "tags": [
                    "Neighborhood"
                ],
                "summary": "Get a list of neighborhoods fee histories",
                "operationId": "3001f3ffba6532d1c68bbd343701f253",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of stores to return per page (default 10).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to return (default 1).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/neighborhood/fee": {
            "get": {
                "tags": [
                    "Neighborhood"
                ],
                "summary": "Get a list of neighborhoods fee",
                "operationId": "0731f8b3c7b7022e7e8b28a3ac013022",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of stores to return per page (default 10).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to return (default 1).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/neighborhood": {
            "post": {
                "tags": [
                    "Neighborhood"
                ],
                "summary": "Create a new neighborhood",
                "operationId": "954d4cba8279559f33c3120b6b5a2d1d",
                "requestBody": {
                    "description": "Neighborhood object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateNeighborhoodRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Neighborhood created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NeighborhoodResource"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/neighborhood/{neighborhood_id}": {
            "put": {
                "tags": [
                    "Neighborhood"
                ],
                "summary": "Update a neighborhood",
                "operationId": "3b8bbd4488593b0c228b077f5b6d2125",
                "parameters": [
                    {
                        "name": "neighborhood_id",
                        "in": "path",
                        "description": "ID of the neighborhood to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Neighborhood object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateNeighborhoodRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Neighborhood created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NeighborhoodResource"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Neighborhood not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Neighborhood"
                ],
                "summary": "Delete a neighborhood",
                "operationId": "b90f9217afe5a2d981e1f797a2134f7e",
                "parameters": [
                    {
                        "name": "neighborhood_id",
                        "in": "path",
                        "description": "ID of the neighborhood to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Neighborhood created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NeighborhoodResource"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Neighborhood not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "description": "Registers a new user and sends a verification code via SMS",
                "operationId": "4f180d96579be230948368a8ef1bab66",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "is_new": {
                                                    "type": "bolean",
                                                    "example": "true"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Authentication code sent to your mobile."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/verify": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Complete user registration",
                "description": "Complete user registration with activation code",
                "operationId": "eaabe2331d6853f1538efbe76edd7ef8",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VerifyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "token": {
                                                    "type": "string",
                                                    "example": "hash-value"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "family": {
                                                    "type": "string",
                                                    "example": "Doe"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Completed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "description": "Login user with mobile number",
                "operationId": "777e65b246a8910073b45de4f1d18782",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Verification code sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "string",
                                            "example": ""
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Authentication code sent to your mobile."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/login/code": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login with activation code and mobile number",
                "description": "Logs in a user with an activation code and mobile number",
                "operationId": "51ae64416aad5c2719156fd5f697e3db",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginWithCodeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "token": {
                                                    "type": "string",
                                                    "example": "hash-value"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "family": {
                                                    "type": "string",
                                                    "example": "Doe"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Login successful"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/login/password": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login with mobile number and password",
                "description": "Logs in a user with a mobile number and password",
                "operationId": "ec1ac7a4616b1c0116598eb75987f773",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginWithPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "token": {
                                                    "type": "string",
                                                    "example": "hash-value"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "family": {
                                                    "type": "string",
                                                    "example": "Doe"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Login successful"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized login response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorised."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/forgot-password": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Send verification code to reset password",
                "description": "Sends a verification code to the user's mobile number to reset their password",
                "operationId": "069ac36dab250c365f39d64399ba4d61",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForgotPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "string",
                                            "example": ""
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Verification code has been sent."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reset-password": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset user's password",
                "description": "Resets the user's password using the verification code sent to their mobile number",
                "operationId": "16200b77b3fc69127ea91efd4f81a8e1",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "string",
                                            "example": ""
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "password is updated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Error Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/store": {
            "put": {
                "tags": [
                    "Store"
                ],
                "summary": "Update a store",
                "operationId": "4e863ed58fe7f45632abc471ddfff471",
                "requestBody": {
                    "description": "Store data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Store"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Store"
                ],
                "summary": "Create a new store",
                "description": "Creates a new store for the authenticated user.",
                "operationId": "createStore",
                "requestBody": {
                    "description": "Store data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Store"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Store already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Store already exists."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Store"
                ],
                "summary": "Delete the user's store",
                "description": "Deletes the store associated with the authenticated user.",
                "operationId": "deleteStore",
                "responses": {
                    "200": {
                        "description": "Store deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Store deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Store not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Store not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/store/my": {
            "get": {
                "tags": [
                    "Store"
                ],
                "summary": "Get user's store details",
                "description": "Returns the details of the store associated with the authenticated user",
                "operationId": "1bea017187973c6b88a7f2fe115ada86",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Store"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/store/areaTypes": {
            "get": {
                "tags": [
                    "Store"
                ],
                "summary": "Get area types",
                "description": "Returns a list of store area types",
                "operationId": "a93b4f216b6c0eb8df92db145f486071",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "example": "rent"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/store/categories": {
            "get": {
                "tags": [
                    "Store"
                ],
                "summary": "Get store categories",
                "description": "Returns a list of store category",
                "operationId": "f9b2c932484118d27b594c387cb04207",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "title": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/trip/{tripId}/changes": {
            "get": {
                "tags": [
                    "Trip"
                ],
                "summary": "Get a list of trips",
                "operationId": "573ea1f4fe0e02f3fe21c0f6027b1e49",
                "parameters": [
                    {
                        "name": "tripId",
                        "in": "path",
                        "description": "The Id of the trip",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of trips to return per page (default 10).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to return (default 1).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/trip": {
            "get": {
                "tags": [
                    "Trip"
                ],
                "summary": "Get a list of trips",
                "operationId": "79d2f66ed53ff8b41af78d8755f5f94b",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of trips to return per page (default 10).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to return (default 1).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Trip"
                ],
                "summary": "Create a new trip",
                "operationId": "95d104a0703b126a4373e02c6ce2ab1a",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreTripRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Changes Successfully Stored!"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/trip/{code}": {
            "get": {
                "tags": [
                    "Trip"
                ],
                "summary": "Get a trip by its code",
                "operationId": "5194838a15d73494ae74f4d6bde4a008",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the trip",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Trip"
                ],
                "summary": "Update a new trip",
                "operationId": "61639bf4b7a418930b651b42693d7020",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the trip",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTripRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Changes Successfully Updated!"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/trip/{code}": {
            "get": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Get trip details by trip code",
                "operationId": "0f8b09c38d1102eb4a0fe34602e240d3",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the trip",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/trip/{code}/accept": {
            "post": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Accept a trip by its code",
                "operationId": "20edc9440d00f688200fa19f10b38000",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the trip",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/trip/{code}/waiting": {
            "post": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Waiting a trip by its code",
                "operationId": "7fe3b47e4047fcea4e8f087e31158d3d",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the trip",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/trip/{code}/on-the-way": {
            "post": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "on the way a trip by its code",
                "operationId": "f63ce1d81c694027a31188fe6ac6fabc",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the trip",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/trip/{code}/deliver": {
            "post": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Deliver a trip by its code",
                "operationId": "a663b708b2b8bf4f75c96b04063fba2d",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the trip",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/trip/{code}/cancel": {
            "post": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Cancel a trip by its code",
                "operationId": "f1a080c12b796a302397dbe8db323e25",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the trip",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/trip": {
            "get": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Get a list of trips without a vehicle assigned",
                "operationId": "4f08a43e2cd37f86846e364bec83d36c",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of results per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/trip/my": {
            "get": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Get a list of trips with a vehicle assigned",
                "operationId": "7ce3a278694c95d6e0d78fe61080193f",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of results per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter with type : all or delivered or notDelivered or current",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "all"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/store/trip": {
            "post": {
                "tags": [
                    "Store"
                ],
                "summary": "Create a new trip with store",
                "operationId": "e1ed24add160bf15d631017eb8be5662",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTripRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Changes Successfully Stored!"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/store/trip/{code}": {
            "put": {
                "tags": [
                    "Store"
                ],
                "summary": "Update a trip",
                "operationId": "d2667c3589c58254331ae171b026d0fa",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the trip",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateStoreTripRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Changes Successfully Updated!"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/store/trip/{code}/cancel": {
            "put": {
                "tags": [
                    "Store"
                ],
                "summary": "Cancel a trip",
                "operationId": "aec85576f84ca1a6c9c86cff4605838f",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the trip",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Changes Successfully Updated!"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "role": "مقدار نقش کاربر اشتباه است"
                                            }
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "مقدار نقش کاربر اشتباه است"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 400
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 401
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        },
                                        "code": {
                                            "type": "integer",
                                            "example": 422
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/store/trip/my": {
            "get": {
                "tags": [
                    "Store"
                ],
                "summary": "Get a list of trips with a store assigned",
                "operationId": "be50f840b787a87c5e42415ee1dfb9f6",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of results per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter with type : all or delivered or notDelivered or pending",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "all"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/trip/feedbacks": {
            "get": {
                "tags": [
                    "Trip"
                ],
                "summary": "Get a list of trip feedbacks",
                "operationId": "dc2d2024a7fd1b7c9fbbda45e6672459",
                "parameters": [
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "The number of trips to return per page (default 10).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number to return (default 1).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/trip/{code}/feedbacks": {
            "get": {
                "tags": [
                    "Trip"
                ],
                "summary": "Get trip feedback",
                "description": "Get the feedback for a specific trip",
                "operationId": "f00fd576e2786fc62d4a9e472c67ab67",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The trip code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of feedback per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Trip"
                ],
                "summary": "Create trip feedback",
                "description": "Create feedback for a specific trip",
                "operationId": "f948225bcb872d33f092d9446c9a8f27",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The trip code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "integer"
                                    },
                                    "rating": {
                                        "type": "integer"
                                    },
                                    "description": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/admin/trip/{code}/feedbacks/{id}": {
            "put": {
                "tags": [
                    "Trip"
                ],
                "summary": "Update trip feedback",
                "description": "Update feedback for a specific trip",
                "operationId": "3703aec4755f6a47f83604049ba88013",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The trip code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The feedback ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "integer"
                                    },
                                    "rating": {
                                        "type": "integer"
                                    },
                                    "description": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "404": {
                        "description": "Trip or feedback not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/store/trip/{code}/feedbacks": {
            "get": {
                "tags": [
                    "Store"
                ],
                "summary": "Get trip feedback",
                "description": "Get the feedback for a specific trip",
                "operationId": "86a456682636c112d2f4c9d18917c837",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The trip code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of feedback per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Store"
                ],
                "summary": "Create trip feedback",
                "description": "Create feedback for a specific trip",
                "operationId": "8256d4e66659487ee3483ef04f5f4d85",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The trip code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "integer"
                                    },
                                    "rating": {
                                        "type": "integer"
                                    },
                                    "description": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/store/trip/{code}/feedbacks/{id}": {
            "put": {
                "tags": [
                    "Store"
                ],
                "summary": "Update trip feedback",
                "description": "Update feedback for a specific trip",
                "operationId": "63ac2c9f2e1c9badde12a0339135309c",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The trip code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The feedback ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "integer"
                                    },
                                    "rating": {
                                        "type": "integer"
                                    },
                                    "description": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "404": {
                        "description": "Trip or feedback not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/trip/{code}/feedbacks": {
            "get": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Get trip feedback",
                "description": "Get the feedback for a specific trip",
                "operationId": "7a30742e778d20c6413faf5b8874c120",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The trip code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of feedback per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "This action is unauthorized."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Create trip feedback",
                "description": "Create feedback for a specific trip",
                "operationId": "452bee781d65bc2c9b005f8907401d5e",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The trip code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "integer"
                                    },
                                    "rating": {
                                        "type": "integer"
                                    },
                                    "description": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "404": {
                        "description": "Trip not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/trip/{code}/feedbacks/{id}": {
            "put": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Update trip feedback",
                "description": "Update feedback for a specific trip",
                "operationId": "5df5b3318a1434706cec3cde15dcb4b1",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The trip code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The feedback ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "type": "integer"
                                    },
                                    "rating": {
                                        "type": "integer"
                                    },
                                    "description": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response"
                    },
                    "404": {
                        "description": "Trip or feedback not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/user": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user profile",
                "description": "Returns the authenticated user's profile information",
                "operationId": "15119e7ff16d411ed7969cc14573885f",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Update user profile",
                "description": "Update the authenticated user's profile information",
                "operationId": "054b3b41d9cdb41f6425339997f1ee10",
                "requestBody": {
                    "description": "The user's profile information to update",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "maxLength": 70
                                    },
                                    "family": {
                                        "type": "string",
                                        "maxLength": 70
                                    },
                                    "mobile": {
                                        "type": "string",
                                        "format": "mobile",
                                        "example": "09123456789"
                                    },
                                    "nationalCode": {
                                        "type": "string",
                                        "format": "nationalCode",
                                        "example": "0123456789"
                                    },
                                    "nationalPhoto": {
                                        "description": "The user's national photo image file (JPEG or PNG format, max size 15MB, min dimensions 100x100, max dimensions 1000x1000).",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "address": {
                                        "type": "string",
                                        "maxLength": 255
                                    },
                                    "postCode": {
                                        "type": "string",
                                        "format": "postCode",
                                        "example": "1234567890"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "format": "phone",
                                        "example": "1234567890"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The updated user profile",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The user profile was successfully updated and is awaiting admin approval."
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle": {
            "put": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "update a new vehicle",
                "description": "update vehicle record",
                "operationId": "01c90cd07392e89001ffc53fa92d813c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateVehicleRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Vehicle"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Store a new vehicle",
                "description": "Create a new vehicle record",
                "operationId": "24896df2f902c580f204053ef1b9b7c9",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreVehicleRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Vehicle"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Vehicle already exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Vehicle already exists."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Delete the user's vehicle",
                "description": "Deletes the vehicle associated with the authenticated user.",
                "operationId": "deleteVehicle",
                "responses": {
                    "200": {
                        "description": "Vehicle deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Vehicle deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Vehicle not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Vehicle not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/my": {
            "get": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Get user's vehicle details",
                "description": "Returns the details of the vehicle associated with the authenticated user",
                "operationId": "78c93a727f393a9bcf07aa640c3452e0",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Vehicle"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/vehicle/types": {
            "get": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Get vehicle types",
                "description": "Returns a list of vehicle types",
                "operationId": "ed308ca1a61e35125f41b4108bca4cc0",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "example": "motor"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/user/wallet/reasons": {
            "get": {
                "tags": [
                    "Wallet"
                ],
                "summary": "Get all wallet transaction reasons",
                "description": "Returns a list of all wallet transaction reasons",
                "operationId": "757622244ee52d6cfc58857d074d78ec",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/user/wallet": {
            "get": {
                "tags": [
                    "Wallet"
                ],
                "summary": "Get user's wallet",
                "description": "Returns the current user's wallet",
                "operationId": "getWallet",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/user/wallet/transaction": {
            "post": {
                "tags": [
                    "Wallet"
                ],
                "summary": "Create a new wallet transaction",
                "description": "Creates a new wallet transaction for the current user",
                "operationId": "storeTransaction",
                "requestBody": {
                    "description": "Wallet transaction data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreWalletTransactionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/user/wallet/buy-coin": {
            "post": {
                "tags": [
                    "Wallet"
                ],
                "summary": "Buy coin",
                "description": "Buy coins using wallet balance",
                "operationId": "6bf771cc010abc8286b0b6b655e3c00d",
                "requestBody": {
                    "description": "Buy coin request body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BuyCoinRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/v1/user/wallet/increase/online": {
            "post": {
                "tags": [
                    "Wallet"
                ],
                "summary": "Increase wallet balance through online payment",
                "description": "Increase wallet with online gateway",
                "operationId": "183591204bfe5fde3f3ee752a4393cd6",
                "requestBody": {
                    "description": "Payment request body",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "gateway": {
                                        "description": "Payment gateway",
                                        "type": "string",
                                        "enum": [
                                            "zarinpal",
                                            "mellat"
                                        ],
                                        "example": "zarinpal"
                                    },
                                    "amount": {
                                        "description": "Amount to be paid",
                                        "type": "number",
                                        "example": "100000"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorValidation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "SuccessResponse": {
                "title": "Success Response",
                "description": "Schema for a successful API response",
                "properties": {
                    "success": {
                        "description": "Indicates if the request was successful",
                        "type": "boolean",
                        "example": true
                    },
                    "data": {
                        "description": "Response data",
                        "type": "object",
                        "example": []
                    },
                    "message": {
                        "description": "Response message",
                        "type": "string",
                        "example": "Success"
                    }
                },
                "type": "object"
            },
            "ErrorResponse": {
                "title": "Error Response",
                "description": "Schema for an error API response",
                "properties": {
                    "success": {
                        "description": "Indicates if the request was successful",
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "description": "Error message",
                        "type": "string",
                        "example": "Error"
                    }
                },
                "type": "object"
            },
            "ErrorValidation": {
                "title": "Error Validation",
                "description": "Schema for an error Validation API response",
                "properties": {
                    "message": {
                        "description": "Error message",
                        "type": "string",
                        "example": "Error"
                    },
                    "errors": {
                        "description": "Error data",
                        "properties": {
                            "fieldName": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": [
                                        "field is wrong."
                                    ]
                                }
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "CreateEmployeeRequest": {
                "title": "Create Employee Request",
                "description": "Create Employee Request body data",
                "required": [
                    "mobile"
                ],
                "properties": {
                    "name": {
                        "description": "Employee's name",
                        "type": "string",
                        "example": "John"
                    },
                    "family": {
                        "description": "Employee's family name",
                        "type": "string",
                        "example": "Doe"
                    },
                    "employee_code": {
                        "description": "Employee's code",
                        "type": "string",
                        "example": "Doe1523"
                    },
                    "mobile": {
                        "description": "Employee's mobile number",
                        "type": "string",
                        "example": "09123456789"
                    },
                    "password": {
                        "description": "Employee's password",
                        "type": "string",
                        "example": "newPassword"
                    },
                    "nationalCode": {
                        "description": "Employee's national code",
                        "type": "string",
                        "example": "0012345678"
                    },
                    "address": {
                        "description": "Employee's address",
                        "type": "string",
                        "example": "123 Main St, Anytown, USA"
                    },
                    "postCode": {
                        "description": "Employee's postal code",
                        "type": "string",
                        "example": "1234567890"
                    },
                    "phone": {
                        "description": "Employee's phone number",
                        "type": "string",
                        "example": "1234567890"
                    },
                    "role": {
                        "description": "Employee's role",
                        "type": "string",
                        "example": "admin"
                    },
                    "status": {
                        "description": "Employee's status :: 1 => active, 0 => inactive, -1 => suspended, -2 => blocked",
                        "type": "integer",
                        "example": "0"
                    }
                },
                "type": "object"
            },
            "CreateNeighborhoodRequest": {
                "required": [
                    "name",
                    "code",
                    "status"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 25,
                        "minLength": 5,
                        "example": "Example Name"
                    },
                    "code": {
                        "type": "string",
                        "maxLength": 25,
                        "minLength": 5,
                        "example": "Example Code"
                    },
                    "status": {
                        "description": "0 => inactive, 1=> active",
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "example": 1
                    }
                },
                "type": "object"
            },
            "GetEmployeesRequest": {
                "title": "Get Employees Request",
                "description": "Request body data for retrieving a paginated list of employees",
                "properties": {
                    "page": {
                        "description": "The page number to retrieve, defaults to 1",
                        "type": "integer",
                        "example": 1
                    },
                    "per_page": {
                        "description": "The number of results per page, must be one of: 5, 10, 15, 20",
                        "type": "integer",
                        "example": 10
                    }
                },
                "type": "object"
            },
            "StoreNeighborhoodFareRequest": {
                "title": "Store Neighborhood Fare Request",
                "description": "Request body for storing a new neighborhood fare",
                "properties": {
                    "destination": {
                        "description": "The ID of the destination neighborhood",
                        "type": "integer",
                        "example": 1
                    },
                    "origin": {
                        "description": "The ID of the origin neighborhood",
                        "type": "integer",
                        "example": 2
                    },
                    "fare": {
                        "description": "The fare for the neighborhood IRT",
                        "type": "integer",
                        "example": 12000
                    }
                },
                "type": "object"
            },
            "StoreTripRequest": {
                "required": [
                    "store_id",
                    "vehicle_id",
                    "origin_id",
                    "destination_id",
                    "shipment_prepare_time",
                    "trip_rial_fare",
                    "status"
                ],
                "properties": {
                    "store_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "vehicle_id": {
                        "type": "integer",
                        "example": 2
                    },
                    "origin_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "destination_id": {
                        "type": "integer",
                        "example": 2
                    },
                    "shipment_prepare_time": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-01T00:00:00Z"
                    },
                    "deliver_time": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-02T00:00:00Z"
                    },
                    "arrive_time": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-03T00:00:00Z"
                    },
                    "trip_rial_fare": {
                        "type": "integer",
                        "example": 100
                    },
                    "status": {
                        "description": "1=> سفارش ثبت شد,2=> پیک سفارش را پذیرفت,3=> پیک در انتظار دریافت بسته,4=> پیک در مسیر مشتری,5=> بسته تحویل شد,6=> لغو شده",
                        "type": "integer",
                        "example": 1
                    },
                    "customer_name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "customer_phone": {
                        "type": "string",
                        "example": "1234567890"
                    },
                    "description": {
                        "type": "string",
                        "example": "Some description"
                    },
                    "manager_description": {
                        "type": "string",
                        "example": "Some manager description"
                    }
                },
                "type": "object"
            },
            "UpdateCoinSettingRequest": {
                "required": [
                    "id",
                    "shop_coin_fee",
                    "vehicle_coin_fee",
                    "shop_coin_rial_fee",
                    "motor_coin_rial_fee"
                ],
                "properties": {
                    "id": {
                        "description": "The setting coin id",
                        "type": "number",
                        "format": "integer"
                    },
                    "shop_coin_fee": {
                        "description": "The new fee for shops in coins",
                        "type": "number",
                        "format": "integer",
                        "minimum": "0"
                    },
                    "vehicle_coin_fee": {
                        "description": "The new fee for vehicles in coins",
                        "type": "number",
                        "format": "integer",
                        "minimum": "0"
                    },
                    "shop_coin_rial_fee": {
                        "description": "The new fee for shops in rials",
                        "type": "number",
                        "format": "integer",
                        "minimum": "0"
                    },
                    "motor_coin_rial_fee": {
                        "description": "The new fee for motorbikes in rials",
                        "type": "number",
                        "format": "integer",
                        "minimum": "0"
                    }
                },
                "type": "object"
            },
            "UpdateEmployeesRequest": {
                "title": "Update Employee Request",
                "description": "Update Employee Request body data",
                "required": [
                    "mobile"
                ],
                "properties": {
                    "name": {
                        "description": "Employee's name",
                        "type": "string",
                        "example": "John"
                    },
                    "family": {
                        "description": "Employee's family name",
                        "type": "string",
                        "example": "Doe"
                    },
                    "mobile": {
                        "description": "Employee's mobile number",
                        "type": "string",
                        "example": "09123456789"
                    },
                    "password": {
                        "description": "Employee's password",
                        "type": "string",
                        "example": "newPassword"
                    },
                    "nationalCode": {
                        "description": "Employee's national code",
                        "type": "string",
                        "example": "0012345678"
                    },
                    "address": {
                        "description": "Employee's address",
                        "type": "string",
                        "example": "123 Main St, Anytown, USA"
                    },
                    "postCode": {
                        "description": "Employee's postal code",
                        "type": "string",
                        "example": "1234567890"
                    },
                    "phone": {
                        "description": "Employee's phone number",
                        "type": "string",
                        "example": "1234567890"
                    },
                    "role": {
                        "description": "Employee's role",
                        "type": "string",
                        "example": "admin"
                    },
                    "status": {
                        "description": "Employee's status :: 1 => active, 0 => inactive, -1 => suspended, -2 => blocked",
                        "type": "integer",
                        "example": "0"
                    }
                },
                "type": "object"
            },
            "UpdateNeighborhoodFareRequest": {
                "title": "Store Neighborhood Fare Request",
                "description": "Request body for storing a new neighborhood fare",
                "required": [
                    "neighborhood_id",
                    "origin",
                    "destination",
                    "fare"
                ],
                "properties": {
                    "neighborhood_id": {
                        "description": "The ID of the neighborhood fare to update",
                        "type": "integer"
                    },
                    "origin": {
                        "description": "The ID of the origin neighborhood",
                        "type": "integer"
                    },
                    "destination": {
                        "description": "The ID of the destination neighborhood",
                        "type": "integer"
                    },
                    "fare": {
                        "description": "The new fare for the neighborhood",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "UpdateNeighborhoodRequest": {
                "required": [
                    "name",
                    "code",
                    "status"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 25,
                        "minLength": 5,
                        "example": "Example Name"
                    },
                    "code": {
                        "type": "string",
                        "maxLength": 25,
                        "minLength": 5,
                        "example": "Example Code"
                    },
                    "status": {
                        "type": "integer",
                        "enum": [
                            0,
                            1
                        ],
                        "example": 1
                    }
                },
                "type": "object"
            },
            "UpdateTripRequest": {
                "properties": {
                    "store_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "vehicle_id": {
                        "type": "integer",
                        "example": 2
                    },
                    "origin_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "destination_id": {
                        "type": "integer",
                        "example": 2
                    },
                    "shipment_prepare_time": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-01T00:00:00Z"
                    },
                    "deliver_time": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-02T00:00:00Z"
                    },
                    "arrive_time": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-03T00:00:00Z"
                    },
                    "trip_rial_fare": {
                        "type": "integer",
                        "example": 100
                    },
                    "status": {
                        "description": "1=> سفارش ثبت شد,2=> پیک سفارش را پذیرفت,3=> پیک در انتظار دریافت بسته,4=> پیک در مسیر مشتری,5=> بسته تحویل شد,6=> لغو شده",
                        "type": "integer",
                        "example": 1
                    },
                    "customer_name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "customer_phone": {
                        "type": "string",
                        "example": "1234567890"
                    },
                    "description": {
                        "type": "string",
                        "example": "Some description"
                    },
                    "manager_description": {
                        "type": "string",
                        "example": "Some manager description"
                    }
                },
                "type": "object"
            },
            "ForgotPasswordRequest": {
                "title": "Forgot Password Request",
                "description": "Pass user's mobile number",
                "properties": {
                    "mobile": {
                        "type": "string",
                        "format": "mobile",
                        "example": "09123456789"
                    }
                },
                "type": "object"
            },
            "LoginRequest": {
                "title": "Login Request",
                "description": "Pass user mobile number",
                "required": [
                    "mobile"
                ],
                "properties": {
                    "mobile": {
                        "type": "string",
                        "example": "09123456789"
                    }
                },
                "type": "object"
            },
            "LoginWithCodeRequest": {
                "title": "Login With Code Request",
                "description": "Pass user activation code and mobile number",
                "properties": {
                    "code": {
                        "type": "string",
                        "format": "code",
                        "example": "1234"
                    },
                    "mobile": {
                        "type": "string",
                        "format": "mobile",
                        "example": "09123456789"
                    }
                },
                "type": "object"
            },
            "LoginWithPasswordRequest": {
                "title": "Login With PasswordRequest",
                "description": "Pass user mobile number and password",
                "properties": {
                    "mobile": {
                        "type": "string",
                        "format": "mobile",
                        "example": "09123456789"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "example": "MyNewPassword123"
                    }
                },
                "type": "object"
            },
            "RegisterRequest": {
                "title": "Register Request",
                "description": "Schema for the registration request",
                "required": [
                    "mobile"
                ],
                "properties": {
                    "mobile": {
                        "description": "User's mobile number",
                        "type": "string",
                        "example": "09123456789"
                    }
                },
                "type": "object"
            },
            "ResetPasswordRequest": {
                "title": "Reset Password Request",
                "description": "Pass verification code and new password",
                "properties": {
                    "code": {
                        "type": "string",
                        "example": "1234"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "example": "newpassword"
                    }
                },
                "type": "object"
            },
            "VerifyRequest": {
                "title": "Compleate RegistrationRequest Request",
                "description": "Pass user mobile number and activation code",
                "required": [
                    "mobile",
                    "code",
                    "password"
                ],
                "properties": {
                    "mobile": {
                        "type": "string",
                        "example": "09123456789"
                    },
                    "code": {
                        "type": "string",
                        "example": "1234"
                    },
                    "password": {
                        "type": "string",
                        "example": "MyNewPassword123"
                    }
                },
                "type": "object"
            },
            "StoreCoinWalletTransactionRequest": {
                "title": "StoreCoinWalletTransactionRequest",
                "description": "Store Coin Wallet Transaction Request body data",
                "required": [
                    "action",
                    "coins",
                    "reason_code"
                ],
                "properties": {
                    "action": {
                        "description": "Action to perform on the coin wallet balance",
                        "type": "string",
                        "enum": [
                            "increase",
                            "decrease"
                        ]
                    },
                    "coins": {
                        "description": "Amount of coins to perform the action on",
                        "type": "number",
                        "format": "float"
                    },
                    "reason_code": {
                        "description": "Reason code for the coin wallet transaction",
                        "type": "number",
                        "format": "integer"
                    },
                    "description": {
                        "description": "Description of the coin wallet transaction",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateTripRequest": {
                "required": [
                    "destination_id",
                    "vehicle_type",
                    "shipment_prepare_time",
                    "trip_rial_fare"
                ],
                "properties": {
                    "destination_id": {
                        "description": "The ID of the destination neighborhood",
                        "type": "integer"
                    },
                    "vehicle_type": {
                        "description": "0 => MOTOR, 1 => CAR",
                        "type": "integer"
                    },
                    "shipment_prepare_time": {
                        "description": "The time for shipment preparation",
                        "type": "string",
                        "format": "date"
                    },
                    "trip_rial_fare": {
                        "description": "The fare for the trip",
                        "type": "number",
                        "format": "float"
                    },
                    "customer_name": {
                        "description": "The name of the customer",
                        "type": "string",
                        "maxLength": 50,
                        "nullable": true
                    },
                    "customer_phone": {
                        "description": "The phone number of the customer",
                        "type": "string",
                        "maxLength": 50,
                        "nullable": true
                    },
                    "description": {
                        "description": "The description of the trip",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "StoreStoreRequest": {
                "title": "StoreStoreRequest",
                "description": "Store Store Request Body",
                "required": [
                    "category_id",
                    "neighborhood_id",
                    "areaType",
                    "name",
                    "address",
                    "postCode",
                    "phone",
                    "lat",
                    "lang"
                ],
                "properties": {
                    "category_id": {
                        "description": "Category ID",
                        "type": "integer",
                        "example": "1"
                    },
                    "neighborhood_id": {
                        "description": "Neighborhood ID",
                        "type": "integer",
                        "example": "1"
                    },
                    "areaType": {
                        "description": "Area Type",
                        "type": "string",
                        "enum": [
                            "RENT",
                            "OWNERSHIP"
                        ],
                        "example": "RENT"
                    },
                    "name": {
                        "description": "Name",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "address": {
                        "description": "Address",
                        "type": "string",
                        "example": "123 Main St"
                    },
                    "postCode": {
                        "description": "Post Code",
                        "type": "integer",
                        "example": "1234567890"
                    },
                    "phone": {
                        "description": "Phone",
                        "type": "integer",
                        "example": "1234567890"
                    },
                    "lat": {
                        "description": "Latitude",
                        "type": "number",
                        "format": "desimal",
                        "example": "40.7128"
                    },
                    "lang": {
                        "description": "Longitude",
                        "type": "number",
                        "format": "desimal",
                        "example": "-74.0060"
                    }
                },
                "type": "object"
            },
            "UpdateStoreRequest": {
                "title": "UpdateStoreRequest",
                "description": "Updtae Store Request Body",
                "required": [
                    "category_id",
                    "areaType",
                    "name",
                    "address",
                    "postCode",
                    "phone",
                    "lat",
                    "lang"
                ],
                "properties": {
                    "category_id": {
                        "description": "Category ID",
                        "type": "integer",
                        "example": "1"
                    },
                    "areaType": {
                        "description": "Area Type",
                        "type": "string",
                        "enum": [
                            "RENT",
                            "PEROPERTY"
                        ],
                        "example": "RENT"
                    },
                    "name": {
                        "description": "Name",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "address": {
                        "description": "Address",
                        "type": "string",
                        "example": "123 Main St"
                    },
                    "postCode": {
                        "description": "Post Code",
                        "type": "integer",
                        "example": "1234567890"
                    },
                    "phone": {
                        "description": "Phone",
                        "type": "integer",
                        "example": "1234567890"
                    },
                    "lat": {
                        "description": "Latitude",
                        "type": "number",
                        "format": "desimal",
                        "example": "40.7128"
                    },
                    "lang": {
                        "description": "Longitude",
                        "type": "number",
                        "format": "desimal",
                        "example": "-74.0060"
                    }
                },
                "type": "object"
            },
            "UpdateStoreTripRequest": {
                "required": [
                    "destination_id",
                    "vehicle_type",
                    "shipment_prepare_time",
                    "trip_rial_fare"
                ],
                "properties": {
                    "destination_id": {
                        "description": "The ID of the destination neighborhood",
                        "type": "integer"
                    },
                    "vehicle_type": {
                        "description": "0 => MOTOR, 1 => CAR",
                        "type": "integer"
                    },
                    "shipment_prepare_time": {
                        "description": "The time for shipment preparation",
                        "type": "string",
                        "format": "date"
                    },
                    "trip_rial_fare": {
                        "description": "The fare for the trip",
                        "type": "number",
                        "format": "float"
                    },
                    "customer_name": {
                        "description": "The name of the customer",
                        "type": "string",
                        "maxLength": 50,
                        "nullable": true
                    },
                    "customer_phone": {
                        "description": "The phone number of the customer",
                        "type": "string",
                        "maxLength": 50,
                        "nullable": true
                    },
                    "description": {
                        "description": "The description of the trip",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UpdateProfileRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 70
                    },
                    "family": {
                        "type": "string",
                        "maxLength": 70
                    },
                    "mobile": {
                        "type": "string",
                        "format": "mobile",
                        "example": "09123456789"
                    },
                    "nationalCode": {
                        "type": "string",
                        "format": "nationalCode",
                        "example": "0123456789"
                    },
                    "nationalPhoto": {
                        "description": "The user's national photo image file (JPEG or PNG format, max size 15MB, min dimensions 100x100.",
                        "type": "string",
                        "format": "binary"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "postCode": {
                        "type": "string",
                        "format": "postCode",
                        "example": "1234567890"
                    },
                    "phone": {
                        "type": "string",
                        "format": "phone",
                        "example": "1234567890"
                    }
                },
                "type": "object"
            },
            "StoreVehicleRequest": {
                "title": "Store Vehicle Request",
                "description": "Request body for storing a new vehicle",
                "required": [
                    "type",
                    "brand",
                    "pelak",
                    "color",
                    "model"
                ],
                "properties": {
                    "type": {
                        "description": "The type of the vehicle (MOTOR or CAR)",
                        "type": "string",
                        "enum": [
                            "MOTOR",
                            "CAR"
                        ]
                    },
                    "brand": {
                        "description": "The brand of the vehicle",
                        "type": "string",
                        "maxLength": 150
                    },
                    "pelak": {
                        "description": "The pelak of the vehicle",
                        "type": "string",
                        "maxLength": 50
                    },
                    "color": {
                        "description": "The color of the vehicle",
                        "type": "string",
                        "maxLength": 50
                    },
                    "model": {
                        "description": "The model of the vehicle",
                        "type": "string",
                        "maxLength": 150
                    }
                },
                "type": "object"
            },
            "UpdateVehicleRequest": {
                "title": "update Vehicle Request",
                "description": "Request body for updateting a vehicle",
                "required": [
                    "type",
                    "brand",
                    "pelak",
                    "color",
                    "model"
                ],
                "properties": {
                    "type": {
                        "description": "The type of the vehicle (MOTOR or CAR)",
                        "type": "string",
                        "enum": [
                            "MOTOR",
                            "CAR"
                        ]
                    },
                    "brand": {
                        "description": "The brand of the vehicle",
                        "type": "string",
                        "maxLength": 255
                    },
                    "pelak": {
                        "description": "The pelak of the vehicle",
                        "type": "string",
                        "maxLength": 255
                    },
                    "color": {
                        "description": "The color of the vehicle",
                        "type": "string",
                        "maxLength": 255
                    },
                    "model": {
                        "description": "The model of the vehicle",
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "type": "object"
            },
            "BuyCoinRequest": {
                "title": "BuyCoinRequest",
                "description": "The amount of coin to buy",
                "required": [
                    "action"
                ],
                "properties": {
                    "amount": {
                        "description": "The amount to add or subtract from the wallet balance",
                        "type": "number",
                        "format": "float"
                    }
                },
                "type": "object"
            },
            "StoreWalletTransactionRequest": {
                "title": "StoreWalletTransactionRequest",
                "description": "Store wallet transaction request body data",
                "required": [
                    "action",
                    "amount",
                    "reason_code"
                ],
                "properties": {
                    "action": {
                        "description": "The action to perform on the wallet balance",
                        "type": "string",
                        "enum": [
                            "increase",
                            "decrease"
                        ]
                    },
                    "amount": {
                        "description": "The amount to add or subtract from the wallet balance",
                        "type": "number",
                        "format": "float"
                    },
                    "reason_code": {
                        "description": "The reason code for the wallet transaction",
                        "type": "number",
                        "format": "integer"
                    },
                    "description": {
                        "description": "An optional description for the wallet transaction",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "NeighborhoodResource": {
                "title": "NeighborhoodResource",
                "description": "Neighborhood resource",
                "properties": {
                    "user": {
                        "description": "The name of the user who created the neighborhood",
                        "type": "string"
                    },
                    "user_email": {
                        "description": "The email of the user who created the neighborhood",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the neighborhood",
                        "type": "string"
                    },
                    "code": {
                        "description": "The code of the neighborhood",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the neighborhood",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "The date and time when the neighborhood was created",
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "The date and time when the neighborhood was last updated",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CoinWallet": {
                "title": "CoinWallet",
                "description": "A Coin Wallet object",
                "required": [
                    "user_id",
                    "coins"
                ],
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "user_id": {
                        "type": "integer"
                    },
                    "coins": {
                        "type": "number",
                        "format": "integer"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Store": {
                "title": "store",
                "description": "Store model",
                "properties": {
                    "id": {
                        "description": "ID of the store",
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_id": {
                        "description": "ID of the user who owns the store",
                        "type": "integer",
                        "format": "int64"
                    },
                    "category_id": {
                        "description": "ID of the category",
                        "type": "integer",
                        "format": "int64"
                    },
                    "category": {
                        "description": "The store's category",
                        "type": "string"
                    },
                    "name": {
                        "description": "The store's name",
                        "type": "string"
                    },
                    "postCode": {
                        "description": "The store's postal code",
                        "type": "string"
                    },
                    "address": {
                        "description": "The store's address",
                        "type": "string"
                    },
                    "areaType": {
                        "description": "area type of the store",
                        "type": "string",
                        "enum": [
                            "RENT",
                            "PROPERTY"
                        ]
                    },
                    "phone": {
                        "description": "The store's phone number",
                        "type": "string"
                    },
                    "lat": {
                        "description": "The store's Latitude",
                        "type": "number",
                        "format": "float"
                    },
                    "lang": {
                        "description": "The store's Longitude",
                        "type": "number",
                        "format": "float"
                    }
                },
                "type": "object"
            },
            "User": {
                "title": "User",
                "description": "A user object",
                "properties": {
                    "id": {
                        "description": "The user's ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The user's name",
                        "type": "string"
                    },
                    "family": {
                        "description": "The user's family name",
                        "type": "string"
                    },
                    "mobile": {
                        "description": "The user's mobile number",
                        "type": "string"
                    },
                    "nationalCode": {
                        "description": "The user's national code",
                        "type": "string"
                    },
                    "nationalPhoto": {
                        "description": "The user's national photo",
                        "type": "string"
                    },
                    "email": {
                        "description": "The user's email address",
                        "type": "string"
                    },
                    "status": {
                        "description": "The user's status",
                        "type": "integer"
                    },
                    "unValidCodeCount": {
                        "description": "The user's unvalidated code count",
                        "type": "integer"
                    },
                    "address": {
                        "description": "The user's address",
                        "type": "string"
                    },
                    "postCode": {
                        "description": "The user's postal code",
                        "type": "string"
                    },
                    "phone": {
                        "description": "The user's phone number",
                        "type": "string"
                    },
                    "userType": {
                        "description": "The user's type (0 => customer or 2 => admin)",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "The date/time the user was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "The date/time the user was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "wallet": {
                        "$ref": "#/components/schemas/Wallet"
                    },
                    "coinWallet": {
                        "$ref": "#/components/schemas/CoinWallet"
                    },
                    "vehicle": {
                        "$ref": "#/components/schemas/Vehicle"
                    },
                    "store": {
                        "$ref": "#/components/schemas/Store"
                    }
                },
                "type": "object"
            },
            "Vehicle": {
                "title": "Vehicle",
                "description": "Vehicle model",
                "properties": {
                    "id": {
                        "description": "ID of the vehicle",
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_id": {
                        "description": "ID of the user who owns the vehicle",
                        "type": "integer",
                        "format": "int64"
                    },
                    "type": {
                        "description": "Type of the vehicle",
                        "type": "string",
                        "enum": [
                            "MOTOR",
                            "CAR"
                        ]
                    },
                    "brand": {
                        "description": "Brand of the vehicle",
                        "type": "string"
                    },
                    "pelak": {
                        "description": "License plate number of the vehicle",
                        "type": "string"
                    },
                    "color": {
                        "description": "Color of the vehicle",
                        "type": "string"
                    },
                    "model": {
                        "description": "Model of the vehicle",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Wallet": {
                "required": [
                    "user_id",
                    "amount"
                ],
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "user_id": {
                        "type": "integer"
                    },
                    "amount": {
                        "type": "number",
                        "format": "integer"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            }
        },
        "responses": {
            "401": {
                "description": "Unauthorized access",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "422": {
                "description": "Validation Error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorValidation"
                        }
                    }
                }
            },
            "400": {
                "description": "Validation Error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorValidation"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "sanctum": {
                "type": "http",
                "description": "Enter token",
                "name": "Token",
                "in": "header",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }
}
