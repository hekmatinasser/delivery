<?php

namespace Tests\Feature\API;

use App\Models\CoinWallet;
use App\Models\User;
use App\Models\Wallet;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Response;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class WalletTest extends TestCase
{
//    use RefreshDatabase;

    protected $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
//        Sanctum::actingAs($this->user);
    }

    /**
     * test can show wallet
     */
    public function test_can_show_wallet()
    {
        $wallet = Wallet::factory()->create(['user_id' => $this->user->id]);

        $response = $this->actingAs($this->user)->getJson(route('wallet::show'));

        $response->assertSuccessful();
    }

    /**
     * test
     */
    public function test_can_store_new_increase_transaction()
    {
        $wallet = Wallet::factory()->create(['user_id' => $this->user->id]);

        $response = $this->actingAs($this->user)->postJson(route('wallet::store-transaction'), [
            'action' => 'increase',
            'amount' => 100,
            'reason_code' => 11,
        ]);

        $response->assertSuccessful();
    }

    /**
     * test
     */
    public function test_store_new_decrease_amount_should_be_less_that_wallet_amount()
    {
        $wallet = Wallet::factory()->create(['user_id' => $this->user->id, 'amount' => 20]);

        $response = $this->actingAs($this->user)->postJson(route('wallet::store-transaction'), [
            'action' => 'decrease',
            'amount' => 100,
            'reason_code' => 11,
        ]);

        $response->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }

    /*
     * test
     */
    public function test_can_store_new_decrease_transaction()
    {
        $wallet = Wallet::factory()->create(['user_id' => $this->user->id, 'amount' => 200]);

        $response = $this->actingAs($this->user)->postJson(route('wallet::store-transaction'), [
            'action' => 'decrease',
            'amount' => 100,
            'reason_code' => 11,
        ]);

        $response->assertSuccessful();
    }

    /**
     * test
     */
    public function test_can_user_buy_coin()
    {
        $wallet = Wallet::factory()->create(['user_id' => $this->user->id, 'amount' => 200]);
        $coinWallet = CoinWallet::factory()->create(['user_id' => $this->user->id, 'coins' => 10]);

        $response = $this->actingAs($this->user)->postJson(route('wallet::buy-coin'),[
            'amount' => 100
        ]);
        $response->assertSuccessful();
    }

    /**
     * test
     */
    public function test_wallet_should_be_greater_that_amount()
    {
        $wallet = Wallet::factory()->create(['user_id' => $this->user->id, 'amount' => 200]);
        $coinWallet = CoinWallet::factory()->create(['user_id' => $this->user->id, 'coins' => 10]);

        $response = $this->actingAs($this->user)->postJson(route('wallet::buy-coin'),[
            'amount' => 300
        ]);
        $response->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }

    /**
     * test
     */
    public function test_amount_should_be_greater_than_coin_price()
    {
        $wallet = Wallet::factory()->create(['user_id' => $this->user->id, 'amount' => 200]);
        $coinWallet = CoinWallet::factory()->create(['user_id' => $this->user->id, 'coins' => 10]);

        $response = $this->actingAs($this->user)->postJson(route('wallet::buy-coin'),[
            'amount' => 20
        ]);
        $response->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);
    }


    /**
     * test | uncomment to test zarinpal gateway to increase wallet
     */
//    public function test_can_increase_wallet_online_with_zarinpal()
//    {
//        $wallet = Wallet::factory()->create(['user_id' => $this->user]);
//        $response = $this->actingAs($this->user)->postJson(route('wallet::increase-online'),[
//            'gateway' => 'zarinpal',
//            'amount' => 2000
//        ]);
//
//        $response->assertSuccessful();
//    }
}
